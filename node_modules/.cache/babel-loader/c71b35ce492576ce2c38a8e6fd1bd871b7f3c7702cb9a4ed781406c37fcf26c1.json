{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mn320\\\\Desktop\\\\myblog\\\\src\\\\components\\\\CmdWindow\\\\CmdWindow.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport 'C:/Users/mn320/Desktop/myblog/src/components/CmdWindow/CmdWinow.css';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CmdWindow = () => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    const fakeLogs = [\"Connecting to server...\", \"Fetching data...\", \"Processing data...\", \"Generating report...\", \"Connection successful!\", \"Closing connection...\"];\n    let logIndex = 0;\n    const logInterval = setInterval(() => {\n      if (logIndex < fakeLogs.length) {\n        setLogs(prevLogs => [...prevLogs, fakeLogs[logIndex]]);\n        logIndex++;\n      } else {\n        clearInterval(logInterval);\n        setIsComplete(true); // Mark as complete when logs finish\n      }\n    }, 1000); // Print a new log every second\n\n    return () => clearInterval(logInterval); // Cleanup on component unmount\n  }, [isComplete]);\n\n  // This useEffect handles clearing logs and restarting the process\n  useEffect(() => {\n    if (isComplete) {\n      setTimeout(() => {\n        setLogs([]); // Clear the logs\n        setIsComplete(false); // Reset the completion flag\n      }, 2000); // Wait 2 seconds before restarting\n    }\n  }, [isComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"terminal-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"terminal-body\",\n      children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n};\n_s(CmdWindow, \"uO/QAWVPr6pz3Dx6UF5LI6GteIg=\");\n_c = CmdWindow;\nexport default CmdWindow;\nvar _c;\n$RefreshReg$(_c, \"CmdWindow\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CmdWindow","_s","logs","setLogs","isComplete","setIsComplete","fakeLogs","logIndex","logInterval","setInterval","length","prevLogs","clearInterval","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","log","index","_c","$RefreshReg$"],"sources":["C:/Users/mn320/Desktop/myblog/src/components/CmdWindow/CmdWindow.js"],"sourcesContent":["import React from 'react';\r\nimport 'C:/Users/mn320/Desktop/myblog/src/components/CmdWindow/CmdWinow.css'; \r\nimport { useEffect, useState } from 'react';\r\n\r\nconst CmdWindow= () => {\r\n    const [logs, setLogs] = useState([]);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      const fakeLogs = [\r\n        \"Connecting to server...\",\r\n        \"Fetching data...\",\r\n        \"Processing data...\",\r\n        \"Generating report...\",\r\n        \"Connection successful!\",\r\n        \"Closing connection...\"\r\n      ];\r\n  \r\n      let logIndex = 0;\r\n  \r\n      const logInterval = setInterval(() => {\r\n        if (logIndex < fakeLogs.length) {\r\n          setLogs((prevLogs) => [...prevLogs, fakeLogs[logIndex]]);\r\n          logIndex++;\r\n        } else {\r\n          clearInterval(logInterval);\r\n          setIsComplete(true); // Mark as complete when logs finish\r\n        }\r\n      }, 1000); // Print a new log every second\r\n  \r\n      return () => clearInterval(logInterval); // Cleanup on component unmount\r\n    }, [isComplete]);\r\n  \r\n    // This useEffect handles clearing logs and restarting the process\r\n    useEffect(() => {\r\n      if (isComplete) {\r\n        setTimeout(() => {\r\n          setLogs([]);         // Clear the logs\r\n          setIsComplete(false); // Reset the completion flag\r\n        }, 2000);               // Wait 2 seconds before restarting\r\n      }\r\n    }, [isComplete]);\r\n  \r\n    return (\r\n      <div className=\"terminal-window\">\r\n        <div className=\"terminal-header\">\r\n          <span className=\"dot red\"></span>\r\n          <span className=\"dot yellow\"></span>\r\n          <span className=\"dot green\"></span>\r\n        </div>\r\n        <div className=\"terminal-body\">\r\n          {logs.map((log, index) => (\r\n            <div key={index}>{log}</div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nexport default CmdWindow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,qEAAqE;AAC5E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAEA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAG,CACf,yBAAyB,EACzB,kBAAkB,EAClB,oBAAoB,EACpB,sBAAsB,EACtB,wBAAwB,EACxB,uBAAuB,CACxB;IAED,IAAIC,QAAQ,GAAG,CAAC;IAEhB,MAAMC,WAAW,GAAGC,WAAW,CAAC,MAAM;MACpC,IAAIF,QAAQ,GAAGD,QAAQ,CAACI,MAAM,EAAE;QAC9BP,OAAO,CAAEQ,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEL,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC;QACxDA,QAAQ,EAAE;MACZ,CAAC,MAAM;QACLK,aAAa,CAACJ,WAAW,CAAC;QAC1BH,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMO,aAAa,CAACJ,WAAW,CAAC,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;;EAEhB;EACAR,SAAS,CAAC,MAAM;IACd,IAAIQ,UAAU,EAAE;MACdS,UAAU,CAAC,MAAM;QACfV,OAAO,CAAC,EAAE,CAAC,CAAC,CAAS;QACrBE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAe;IAC1B;EACF,CAAC,EAAE,CAACD,UAAU,CAAC,CAAC;EAEhB,oBACEL,OAAA;IAAKe,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BhB,OAAA;MAAKe,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BhB,OAAA;QAAMe,SAAS,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACjCpB,OAAA;QAAMe,SAAS,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpCpB,OAAA;QAAMe,SAAS,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACNpB,OAAA;MAAKe,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3Bb,IAAI,CAACkB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACnBvB,OAAA;QAAAgB,QAAA,EAAkBM;MAAG,GAAXC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAlB,EAAA,CArDGD,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAwDf,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}