{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mn320\\\\Desktop\\\\myblog\\\\src\\\\components\\\\CmdWindow\\\\CmdWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CmdWindow = () => {\n  _s();\n  const [output, setOutput] = useState([]);\n  const [input, setInput] = useState('');\n  const [prompt, setPrompt] = useState('C:\\\\Users\\\\User> ');\n  useEffect(() => {\n    // Initialize the output with a welcome message\n    setOutput([prompt, 'Welcome to the CMD simulator!']);\n  }, []);\n  const handleInput = event => {\n    const userInput = event.target.value;\n    setInput(userInput);\n    // Simulate the execution of the command\n    simulateCommand(userInput);\n  };\n  const simulateCommand = command => {\n    if (command === 'scrape') {\n      // Simulate the scraping process\n      const scrapingMessages = ['Scraping page 1...', 'Scraping page 2...', 'Scraping page 3...', 'Done scraping!'];\n      scrapingMessages.forEach((message, index) => {\n        setTimeout(() => {\n          setOutput(prevOutput => [...prevOutput, message]);\n        }, index * 1000); // delay each message by 1 second\n      });\n    } else if (command === 'clear') {\n      // Clear the output\n      setOutput([prompt]);\n    } else if (command === 'exit') {\n      // Exit the simulator\n      setOutput(prevOutput => [...prevOutput, 'Exiting...']);\n      setTimeout(() => {\n        setOutput([prompt]);\n      }, 1000);\n    } else {\n      // Handle other commands\n      setOutput(prevOutput => [...prevOutput, `Unknown command: ${command}`]);\n    }\n    setInput(''); // clear the input field\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      simulateCommand(input);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cmd-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cmd-output\",\n      children: output.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInput,\n      onKeyPress: handleKeyPress,\n      placeholder: \"Enter a command...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(CmdWindow, \"yt4adx5VAfg44QH0ZNo8P5EiITk=\");\n_c = CmdWindow;\nexport default CmdWindow;\nvar _c;\n$RefreshReg$(_c, \"CmdWindow\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CmdWindow","_s","output","setOutput","input","setInput","prompt","setPrompt","handleInput","event","userInput","target","value","simulateCommand","command","scrapingMessages","forEach","message","index","setTimeout","prevOutput","handleKeyPress","key","className","children","map","line","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/mn320/Desktop/myblog/src/components/CmdWindow/CmdWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst CmdWindow = () => {\r\n  const [output, setOutput] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [prompt, setPrompt] = useState('C:\\\\Users\\\\User> ');\r\n\r\n  useEffect(() => {\r\n    // Initialize the output with a welcome message\r\n    setOutput([prompt, 'Welcome to the CMD simulator!']);\r\n  }, []);\r\n\r\n  const handleInput = (event) => {\r\n    const userInput = event.target.value;\r\n    setInput(userInput);\r\n    // Simulate the execution of the command\r\n    simulateCommand(userInput);\r\n  };\r\n\r\n  const simulateCommand = (command) => {\r\n    if (command === 'scrape') {\r\n      // Simulate the scraping process\r\n      const scrapingMessages = [\r\n        'Scraping page 1...',\r\n        'Scraping page 2...',\r\n        'Scraping page 3...',\r\n        'Done scraping!',\r\n      ];\r\n\r\n      scrapingMessages.forEach((message, index) => {\r\n        setTimeout(() => {\r\n          setOutput((prevOutput) => [...prevOutput, message]);\r\n        }, index * 1000); // delay each message by 1 second\r\n      });\r\n    } else if (command === 'clear') {\r\n      // Clear the output\r\n      setOutput([prompt]);\r\n    } else if (command === 'exit') {\r\n      // Exit the simulator\r\n      setOutput((prevOutput) => [...prevOutput, 'Exiting...']);\r\n      setTimeout(() => {\r\n        setOutput([prompt]);\r\n      }, 1000);\r\n    } else {\r\n      // Handle other commands\r\n      setOutput((prevOutput) => [...prevOutput, `Unknown command: ${command}`]);\r\n    }\r\n    setInput(''); // clear the input field\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      simulateCommand(input);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cmd-window\">\r\n      <div className=\"cmd-output\">\r\n        {output.map((line, index) => (\r\n          <div key={index}>{line}</div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        onChange={handleInput}\r\n        onKeyPress={handleKeyPress}\r\n        placeholder=\"Enter a command...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CmdWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}